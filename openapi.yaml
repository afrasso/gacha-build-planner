openapi: 3.0.0
info:
  title: My Next.js API
  version: 1.0.0
paths:
  /api/users:
    get:
      summary: Returns all users
      parameters:
        - name: email
          description: Filter by email
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  _links:
                    type: object
                    properties:
                      self:
                        $ref: "#/components/schemas/Link"
                  _embedded:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new user
      requestBody:
        description: The user data to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: The created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/users/{userId}:
    get:
      summary: Returns the user with the given ID
      parameters:
        - name: userId
          description: ID of the user to retrieve
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The requested user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update the user with the given ID
      parameters:
        - name: userId
          description: ID of the user to update
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: The user data to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: The updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete the user with the given ID
      parameters:
        - name: userId
          description: ID of the user to delete
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/users/{userId}/plans:
    get:
      summary: Returns all plans owned by the specified user
      parameters:
        - name: userId
          description: ID of the user whose plans are being retrieved
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of plans owned by the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      $ref: "#/components/schemas/Plan"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new plan for the specified user
      parameters:
        - name: userId
          description: ID of the user to associate the plan with
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: The plan data to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanRequest"
      responses:
        "201":
          description: The created plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/users/{userId}/plans/{planId}:
    get:
      summary: Returns the plan owned by the specified user with the specified ID
      parameters:
        - name: userId
          description: ID of the user who owns the plan
          in: path
          required: true
          schema:
            type: string
        - name: planId
          in: path
          description: ID of the plan to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The requested plan
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan:
                    $ref: "#/components/schemas/Plan"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update the plan owned by the specified user
      parameters:
        - name: userId
          description: ID of the user who owns the plan
          in: path
          required: true
          schema:
            type: string
        - name: planId
          in: path
          description: ID of the plan to update
          required: true
          schema:
            type: string
      requestBody:
        description: The plan data to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanRequest"
      responses:
        "200":
          description: The updated plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete the plan owned by the specified user
      parameters:
        - name: userId
          description: ID of the user who owns the plan
          in: path
          required: true
          schema:
            type: string
        - name: planId
          in: path
          description: ID of the plan to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Plan deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Error:
      type: object
      description: An error
      properties:
        message:
          description: A message containing the detail of the error that occurred
          type: string
      additionalProperties: false
    Link:
      type: object
      description: A link to a related resource
      properties:
        href:
          description: The URL to the resource being linked
          type: string
      additionalProperties: false
    LinkWithId:
      description: A link to a related resource with the ID of that resource
      allOf:
        - $ref: "#/components/schemas/Link"
        - type: object
          properties:
            id:
              description: The ID of the resource being linked
              type: string
      additionalProperties: false
    Plan:
      description: A plan object with an ID and links used when retrieving plans
      allOf:
        - $ref: "#/components/schemas/PlanRequest"
        - type: object
          properties:
            id:
              type: string
              description: The user ID
            _links:
              properties:
                self:
                  $ref: "#/components/schemas/LinkWithId"
      additionalProperties: false
    PlanRequest:
      description: A plan object without an ID or links used for creating or updating a plan
      type: object
      properties:
        builds:
          description: The builds associated with the plan
          type: array
          items:
            type: object
      additionalProperties: false
    Result:
      type: object
      description: An result of a successful operation
      properties:
        message:
          description: A message containing the detail of the successful operation
          type: string
      additionalProperties: false
    User:
      description: A user object with an ID and links used when retrieving users
      allOf:
        - $ref: "#/components/schemas/UserRequest"
        - type: object
          properties:
            id:
              type: string
              description: The user ID
            _links:
              properties:
                self:
                  $ref: "#/components/schemas/LinkWithId"
      additionalProperties: false
    UserRequest:
      description: A user object without an ID or links used for creating or updating a user
      type: object
      properties:
        email:
          type: string
          description: The user's email address
      additionalProperties: false
  securitySchemes:
    GoogleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            email: Access user’s email address
security:
  - GoogleOAuth: [email]
